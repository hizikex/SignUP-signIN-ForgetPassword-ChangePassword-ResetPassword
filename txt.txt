const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const messageSchema = new Schema({
  sender: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  recipient: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  text: {
    type: String,
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

const Message = mongoose.model('Message', messageSchema);

module.exports = Message;


//create a message
const mongoose = require('mongoose');
const Message = require('./Message');
const Patient = require('./Patient');
const Doctor = require('./Doctor');

async function createMessage(senderId, recipientId, content) {
  const sender = await Patient.findById(senderId);
  const recipient = await Doctor.findById(recipientId);

  if (!sender || !recipient) {
    throw new Error('Sender or recipient not found');
  }

  const message = new Message({
    sender: sender._id,
    recipient: recipient._id,
    content: content
  });

  await message.save();
}


//



//
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const userSchema = new Schema({
  username: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true
  }
});

const User = mongoose.model('User', userSchema);

module.exports = User;


//
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const User = require('./User');

const patientSchema = new Schema({
  user: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  medicalHistory: {
    type: String
  }
});

const Patient = User.discriminator('Patient', patientSchema);

const doctorSchema = new Schema({
  user: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  specialties: [{
    type: String
  }]
});

const Doctor = User.discriminator('Doctor', doctorSchema);

module.exports = {
  Patient,
  Doctor
};